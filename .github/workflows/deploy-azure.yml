name: Deploy to Azure VM

on:
  push:
    branches: [ main, production ]
    paths:
      - 'ciphemic-tech-server-main/**'
  workflow_dispatch:

env:
  AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
  AZURE_VM_USER: ${{ secrets.AZURE_VM_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./ciphemic-tech-server-main
        file: ./ciphemic-tech-server-main/Dockerfile.production
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/ciphemic-backend:latest
          ${{ env.DOCKER_REGISTRY }}/ciphemic-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Azure VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.AZURE_VM_IP }}
        username: ${{ env.AZURE_VM_USER }}
        key: ${{ env.SSH_PRIVATE_KEY }}
        script: |
          # Navigate to application directory
          cd /opt/ciphemic-backend
          
          # Pull latest changes
          git pull origin main
          
          # Login to Docker registry
          echo "${{ env.DOCKER_PASSWORD }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ env.DOCKER_USERNAME }} --password-stdin
          
          # Pull latest image
          docker pull ${{ env.DOCKER_REGISTRY }}/ciphemic-backend:latest
          
          # Stop and remove old containers
          docker-compose down
          
          # Start new containers
          docker-compose -f docker-compose.production.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Check deployment status
          sleep 10
          docker-compose -f docker-compose.production.yml ps
          
          # Test health endpoint
          curl -f http://localhost:8000/api/test || exit 1

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi
